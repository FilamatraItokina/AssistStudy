// Script de v√©rification avant d√©ploiement
const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification de la configuration pour le d√©ploiement...\n');

let errors = 0;
let warnings = 0;

// V√©rifier les fichiers essentiels
const essentialFiles = [
  'server.js',
  'package.json',
  '.gitignore',
  '.env',
  'client/package.json',
  'client/vite.config.js',
  'client/src/utils/api.js'
];

console.log('üìÅ Fichiers essentiels:');
essentialFiles.forEach(file => {
  if (fs.existsSync(path.join(__dirname, file))) {
    console.log(`  ‚úÖ ${file}`);
  } else {
    console.log(`  ‚ùå ${file} - MANQUANT`);
    errors++;
  }
});

// V√©rifier .gitignore
console.log('\nüìù V√©rification .gitignore:');
const gitignore = fs.readFileSync(path.join(__dirname, '.gitignore'), 'utf8');
const requiredIgnores = ['.env', 'node_modules', 'data.sqlite'];
requiredIgnores.forEach(pattern => {
  if (gitignore.includes(pattern)) {
    console.log(`  ‚úÖ ${pattern} est ignor√©`);
  } else {
    console.log(`  ‚ö†Ô∏è  ${pattern} devrait √™tre dans .gitignore`);
    warnings++;
  }
});

// V√©rifier package.json scripts
console.log('\n‚öôÔ∏è  Scripts package.json:');
const pkg = JSON.parse(fs.readFileSync(path.join(__dirname, 'package.json'), 'utf8'));
if (pkg.scripts && pkg.scripts.server) {
  console.log('  ‚úÖ Script "server" d√©fini');
} else {
  console.log('  ‚ùå Script "server" manquant');
  errors++;
}

// V√©rifier les d√©pendances
console.log('\nüì¶ D√©pendances critiques:');
const criticalDeps = ['express', 'cors', 'sqlite3', 'jsonwebtoken', 'bcrypt', 'dotenv'];
criticalDeps.forEach(dep => {
  if (pkg.dependencies && pkg.dependencies[dep]) {
    console.log(`  ‚úÖ ${dep}`);
  } else {
    console.log(`  ‚ùå ${dep} - MANQUANT`);
    errors++;
  }
});

// V√©rifier client/package.json
console.log('\nüé® Frontend:');
const clientPkg = JSON.parse(fs.readFileSync(path.join(__dirname, 'client/package.json'), 'utf8'));
if (clientPkg.scripts && clientPkg.scripts.build) {
  console.log('  ‚úÖ Script build d√©fini');
} else {
  console.log('  ‚ùå Script build manquant');
  errors++;
}

const clientDeps = ['react', 'react-dom', 'react-router-dom'];
clientDeps.forEach(dep => {
  if (clientPkg.dependencies && clientPkg.dependencies[dep]) {
    console.log(`  ‚úÖ ${dep}`);
  } else {
    console.log(`  ‚ùå ${dep} - MANQUANT`);
    errors++;
  }
});

// V√©rifier api.js
console.log('\nüîó Configuration API:');
const apiFile = fs.readFileSync(path.join(__dirname, 'client/src/utils/api.js'), 'utf8');
if (apiFile.includes('VITE_API_URL')) {
  console.log('  ‚úÖ Variable VITE_API_URL configur√©e');
} else {
  console.log('  ‚ö†Ô∏è  VITE_API_URL non trouv√©e dans api.js');
  warnings++;
}

// R√©sum√©
console.log('\n' + '='.repeat(50));
if (errors === 0 && warnings === 0) {
  console.log('‚úÖ TOUT EST PR√äT POUR LE D√âPLOIEMENT !');
  console.log('\nüìö Suivez le guide: DEPLOY_RAPIDE.md');
} else {
  if (errors > 0) {
    console.log(`‚ùå ${errors} erreur(s) trouv√©e(s) - √Ä corriger avant d√©ploiement`);
  }
  if (warnings > 0) {
    console.log(`‚ö†Ô∏è  ${warnings} avertissement(s)`);
  }
}
console.log('='.repeat(50) + '\n');
